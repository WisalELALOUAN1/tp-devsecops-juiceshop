name: "CodeQL SAST Scan"

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '30 1 * * 0'
  workflow_dispatch:

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        output: codeql-results

    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      with:
        name: sarif-results
        path: codeql-results

  generate-report:
    needs: analyze
    name: Generate HTML Report
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Download SARIF results
      uses: actions/download-artifact@v4
      with:
        name: sarif-results

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install jinja2

    - name: Create SARIF to HTML converter
      run: |
        cat > sarif_to_html.py << 'EOF'
        import json
        import os
        from jinja2 import Template
        
        # Template HTML simple
        html_template = """
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CodeQL Security Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { background: #f5f5f5; padding: 20px; border-radius: 5px; }
                .issue { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
                .critical { border-left: 5px solid #d73a49; }
                .high { border-left: 5px solid #f66a0a; }
                .medium { border-left: 5px solid #ffd33d; }
                .low { border-left: 5px solid #28a745; }
                .rule-id { font-weight: bold; color: #0366d6; }
                .message { margin: 10px 0; }
                .location { background: #f6f8fa; padding: 5px; border-radius: 3px; font-family: monospace; }
                .summary { background: #e1e4e8; padding: 10px; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üîí CodeQL Security Report</h1>
                <p>Generated from SARIF file: {{ filename }}</p>
            </div>
            
            <div class="summary">
                <h3>üìä Summary</h3>
                <p>Total Issues: {{ total_issues }}</p>
                <p>Critical: {{ severity_counts.critical or 0 }}</p>
                <p>High: {{ severity_counts.high or 0 }}</p>
                <p>Medium: {{ severity_counts.medium or 0 }}</p>
                <p>Low: {{ severity_counts.low or 0 }}</p>
            </div>
            
            {% for run in runs %}
            <div class="run">
                <h2>Tool: {{ run.tool.name }} {{ run.tool.version or '' }}</h2>
                
                {% for result in run.results %}
                <div class="issue {{ result.level or 'warning' }}">
                    <div class="rule-id">{{ result.ruleId }}</div>
                    <div class="message">{{ result.message.text }}</div>
                    
                    {% if result.locations %}
                    <div class="locations">
                        <strong>Locations:</strong>
                        {% for location in result.locations %}
                        <div class="location">
                            {{ location.physicalLocation.artifactLocation.uri }}:{{ location.physicalLocation.region.startLine }}
                        </div>
                        {% endfor %}
                    </div>
                    {% endif %}
                    
                    <div class="level"><strong>Level:</strong> {{ result.level or 'warning' }}</div>
                </div>
                {% endfor %}
            </div>
            {% endfor %}
        </body>
        </html>
        """
        
        def convert_sarif_to_html(sarif_file, html_file):
            with open(sarif_file, 'r') as f:
                sarif_data = json.load(f)
            
            # Compter les s√©v√©rit√©s
            severity_counts = {
                'critical': 0,
                'high': 0,
                'medium': 0,
                'low': 0,
                'warning': 0,
                'note': 0
            }
            
            total_issues = 0
            
            for run in sarif_data.get('runs', []):
                for result in run.get('results', []):
                    total_issues += 1
                    level = result.get('level', 'warning').lower()
                    if level in severity_counts:
                        severity_counts[level] += 1
            
            template = Template(html_template)
            html_content = template.render(
                filename=os.path.basename(sarif_file),
                runs=sarif_data.get('runs', []),
                total_issues=total_issues,
                severity_counts=severity_counts
            )
            
            with open(html_file, 'w') as f:
                f.write(html_content)
            
            print(f"‚úÖ Converted {sarif_file} to {html_file}")
            print(f"üìä Total issues: {total_issues}")
        
        if __name__ == "__main__":
            import sys
            if len(sys.argv) != 3:
                print("Usage: python sarif_to_html.py input.sarif output.html")
                sys.exit(1)
            
            convert_sarif_to_html(sys.argv[1], sys.argv[2])
        EOF

    - name: Convert SARIF to HTML
      run: |
        # Trouver le fichier SARIF
        SARIF_FILE=$(find . -name "*.sarif" -type f | head -1)
        
        if [ -z "$SARIF_FILE" ]; then
          echo "‚ùå Aucun fichier SARIF trouv√©"
          exit 1
        fi
        
        echo "‚úÖ Conversion de: $SARIF_FILE"
        python sarif_to_html.py "$SARIF_FILE" codeql-report.html
        
        if [ -f "codeql-report.html" ]; then
          echo "‚úÖ Rapport HTML g√©n√©r√© avec succ√®s"
          echo "üìä Taille: $(wc -l < codeql-report.html) lignes"
        else
          echo "‚ùå √âchec de la g√©n√©ration"
          exit 1
        fi

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: codeql-sast-report
        path: codeql-report.html
